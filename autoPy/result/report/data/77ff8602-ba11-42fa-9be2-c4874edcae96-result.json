{"name": "测试请求数据与依赖数据相同key的情况", "status": "broken", "statusDetails": {"message": "ValueError: Circular reference detected", "trace": "self = <TestApi.TestApiAuto object at 0x0000018E05D83860>\ncase_number = 'case_009', case_title = '测试请求数据与依赖数据相同key的情况', path = 'users'\nis_token = '读', method = 'get', parametric_key = 'params', file_var = ''\nfile_path = '', parameters = ''\ndependent = '{\"case_002\": [\"$.data.id\"],\"case_001\":[\"$.meta.msg\",\"$.meta.status\"]}'\ndata = {'id': [1, [1, [1, [1, [1, [...]]]]]], 'pagenum': 1, 'pagesize': '12'}\nres_reg = '', expect = '{\"msg\": \"获取管理员列表成功\", \"status\": 200}'\n\n    @pytest.mark.parametrize('case_number,case_title,path,is_token,method,parametric_key,file_var,'\n                             'file_path,parameters,dependent,data,res_reg,expect',data_list)\n    def test_main(self,case_number,case_title,path,is_token,method,parametric_key,file_var,\n                  file_path,parameters,dependent,data,res_reg,expect):\n        #动态添加标题\n        allure.dynamic.title(case_title)\n    \n        logger.debug(f'***********...执行用例编号： {case_number} ...***********')\n    \n    \n        with allure.step(\"处理相关数据依赖，header\"):\n    \n            data,header,parameters_path_url = treat_data.treating_data(is_token,parameters,dependent,data,save_response_dict)\n    \n            allure.attach(json.dumps(header,ensure_ascii=False,indent=4),\"请求头\",allure.attachment_type.TEXT)\n>           allure.attach(json.dumps(data,ensure_ascii=False,indent=4),\"请求数据\",allure.attachment_type.TEXT)\n\nTestApi.py:85: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\DM\\AppData\\Local\\Programs\\Python\\Python36\\lib\\json\\__init__.py:238: in dumps\n    **kw).encode(obj)\nC:\\Users\\DM\\AppData\\Local\\Programs\\Python\\Python36\\lib\\json\\encoder.py:201: in encode\n    chunks = list(chunks)\nC:\\Users\\DM\\AppData\\Local\\Programs\\Python\\Python36\\lib\\json\\encoder.py:430: in _iterencode\n    yield from _iterencode_dict(o, _current_indent_level)\nC:\\Users\\DM\\AppData\\Local\\Programs\\Python\\Python36\\lib\\json\\encoder.py:404: in _iterencode_dict\n    yield from chunks\nC:\\Users\\DM\\AppData\\Local\\Programs\\Python\\Python36\\lib\\json\\encoder.py:325: in _iterencode_list\n    yield from chunks\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nlst = [1, [1, [1, [1, [1, [1, [...]]]]]]], _current_indent_level = 2\n\n    def _iterencode_list(lst, _current_indent_level):\n        if not lst:\n            yield '[]'\n            return\n        if markers is not None:\n            markerid = id(lst)\n            if markerid in markers:\n>               raise ValueError(\"Circular reference detected\")\nE               ValueError: Circular reference detected\n\nC:\\Users\\DM\\AppData\\Local\\Programs\\Python\\Python36\\lib\\json\\encoder.py:284: ValueError"}, "steps": [{"name": "处理相关数据依赖，header", "status": "broken", "statusDetails": {"message": "ValueError: Circular reference detected\n", "trace": "  File \"E:\\pyAutoTest\\autoPy\\test\\TestApi.py\", line 85, in test_main\n    allure.attach(json.dumps(data,ensure_ascii=False,indent=4),\"请求数据\",allure.attachment_type.TEXT)\n  File \"C:\\Users\\DM\\AppData\\Local\\Programs\\Python\\Python36\\lib\\json\\__init__.py\", line 238, in dumps\n    **kw).encode(obj)\n  File \"C:\\Users\\DM\\AppData\\Local\\Programs\\Python\\Python36\\lib\\json\\encoder.py\", line 201, in encode\n    chunks = list(chunks)\n  File \"C:\\Users\\DM\\AppData\\Local\\Programs\\Python\\Python36\\lib\\json\\encoder.py\", line 430, in _iterencode\n    yield from _iterencode_dict(o, _current_indent_level)\n  File \"C:\\Users\\DM\\AppData\\Local\\Programs\\Python\\Python36\\lib\\json\\encoder.py\", line 404, in _iterencode_dict\n    yield from chunks\n  File \"C:\\Users\\DM\\AppData\\Local\\Programs\\Python\\Python36\\lib\\json\\encoder.py\", line 325, in _iterencode_list\n    yield from chunks\n  File \"C:\\Users\\DM\\AppData\\Local\\Programs\\Python\\Python36\\lib\\json\\encoder.py\", line 284, in _iterencode_list\n    raise ValueError(\"Circular reference detected\")\n"}, "attachments": [{"name": "请求头", "source": "537c93bf-21a4-425f-a0f3-eb0c5a16c825-attachment.txt", "type": "text/plain"}], "start": 1606903500056, "stop": 1606903500059}], "parameters": [{"name": "case_number", "value": "'case_009'"}, {"name": "case_title", "value": "'测试请求数据与依赖数据相同key的情况'"}, {"name": "path", "value": "'users'"}, {"name": "is_token", "value": "'读'"}, {"name": "method", "value": "'get'"}, {"name": "parametric_key", "value": "'params'"}, {"name": "file_var", "value": "''"}, {"name": "file_path", "value": "''"}, {"name": "parameters", "value": "''"}, {"name": "dependent", "value": "'{\"case_002\": [\"$.data.id\"],\"case_001\":[\"$.meta.msg\",\"$.meta.status\"]}'"}, {"name": "data", "value": "'{\"pagenum\": 1, \"pagesize\": \"12\",\"id\":[1]}'"}, {"name": "res_reg", "value": "''"}, {"name": "expect", "value": "'{\"msg\": \"获取管理员列表成功\", \"status\": 200}'"}], "start": 1606903500056, "stop": 1606903500060, "uuid": "c47584a3-1e84-4e3c-a2a3-a13e95a71436", "historyId": "98e3538d3c395fdcb5d0bdce4e89c669", "testCaseId": "043fc57e15d26b22bf4ef83ab196c989", "fullName": "test.TestApi.TestApiAuto#test_main[case_009-测试请求数据与依赖数据相同key的情况-users-读-get-params----{\"case_002\": [\"$.data.id\"],\"case_001\":[\"$.meta.msg\",\"$.meta.status\"]}-{\"pagenum\": 1, \"pagesize\": \"12\",\"id\":", "labels": [{"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "TestApi"}, {"name": "subSuite", "value": "TestApiAuto"}, {"name": "host", "value": "DESKTOP-O07PCGI"}, {"name": "thread", "value": "5364-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.TestApi"}]}