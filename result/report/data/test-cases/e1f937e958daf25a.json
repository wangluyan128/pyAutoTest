{
  "uid" : "e1f937e958daf25a",
  "name" : "修改用户状态为2",
  "fullName" : "test.TestApi.TestApiAuto#test_main",
  "historyId" : "f6a3397353ad11578342caeb52691388",
  "time" : {
    "start" : 1606979507746,
    "stop" : 1606979507754,
    "duration" : 8
  },
  "status" : "broken",
  "statusMessage" : "requests.exceptions.InvalidURL: Failed to parse: http://dms-api.op.dianhun.cn:80users/{\"case_005\":\"$.data.id\"}/state/2",
  "statusTrace" : "self = <PreparedRequest [PUT]>\nurl = 'http://dms-api.op.dianhun.cn:80users/{\"case_005\":\"$.data.id\"}/state/2'\nparams = OrderedDict()\n\n    def prepare_url(self, url, params):\n        \"\"\"Prepares the given HTTP URL.\"\"\"\n        #: Accept objects that have string representations.\n        #: We're unable to blindly call unicode/str functions\n        #: as this will include the bytestring indicator (b'')\n        #: on python 3.x.\n        #: https://github.com/psf/requests/pull/2238\n        if isinstance(url, bytes):\n            url = url.decode('utf8')\n        else:\n            url = unicode(url) if is_py2 else str(url)\n    \n        # Remove leading whitespaces from url\n        url = url.lstrip()\n    \n        # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n        # `data` etc to work around exceptions from `url_parse`, which\n        # handles RFC 3986 only.\n        if ':' in url and not url.lower().startswith('http'):\n            self.url = url\n            return\n    \n        # Support for unicode domain names and paths.\n        try:\n>           scheme, auth, host, port, path, query, fragment = parse_url(url)\n\nC:\\Users\\DM\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\requests\\models.py:380: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nurl = 'http://dms-api.op.dianhun.cn:80users/{\"case_005\":\"$.data.id\"}/state/2'\n\n    def parse_url(url):\n        \"\"\"\n        Given a url, return a parsed :class:`.Url` namedtuple. Best-effort is\n        performed to parse incomplete urls. Fields not provided will be None.\n        This parser is RFC 3986 compliant.\n    \n        The parser logic and helper functions are based heavily on\n        work done in the ``rfc3986`` module.\n    \n        :param str url: URL to parse into a :class:`.Url` namedtuple.\n    \n        Partly backwards-compatible with :mod:`urlparse`.\n    \n        Example::\n    \n            >>> parse_url('http://google.com/mail/')\n            Url(scheme='http', host='google.com', port=None, path='/mail/', ...)\n            >>> parse_url('google.com:80')\n            Url(scheme=None, host='google.com', port=80, path=None, ...)\n            >>> parse_url('/foo?bar')\n            Url(scheme=None, host=None, port=None, path='/foo', query='bar', ...)\n        \"\"\"\n        if not url:\n            # Empty\n            return Url()\n    \n        source_url = url\n        if not SCHEME_RE.search(url):\n            url = \"//\" + url\n    \n        try:\n            scheme, authority, path, query, fragment = URI_RE.match(url).groups()\n            normalize_uri = scheme is None or scheme.lower() in NORMALIZABLE_SCHEMES\n    \n            if scheme:\n                scheme = scheme.lower()\n    \n            if authority:\n                auth, host, port = SUBAUTHORITY_RE.match(authority).groups()\n                if auth and normalize_uri:\n                    auth = _encode_invalid_chars(auth, USERINFO_CHARS)\n                if port == \"\":\n                    port = None\n            else:\n                auth, host, port = None, None, None\n    \n            if port is not None:\n                port = int(port)\n                if not (0 <= port <= 65535):\n                    raise LocationParseError(url)\n    \n            host = _normalize_host(host, scheme)\n    \n            if normalize_uri and path:\n                path = _remove_path_dot_segments(path)\n                path = _encode_invalid_chars(path, PATH_CHARS)\n            if normalize_uri and query:\n                query = _encode_invalid_chars(query, QUERY_CHARS)\n            if normalize_uri and fragment:\n                fragment = _encode_invalid_chars(fragment, FRAGMENT_CHARS)\n    \n        except (ValueError, AttributeError):\n>           return six.raise_from(LocationParseError(source_url), None)\n\nC:\\Users\\DM\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\urllib3\\util\\url.py:392: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nvalue = None, from_value = None\n\n>   ???\nE   urllib3.exceptions.LocationParseError: Failed to parse: http://dms-api.op.dianhun.cn:80users/{\"case_005\":\"$.data.id\"}/state/2\n\n<string>:3: LocationParseError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <TestApi.TestApiAuto object at 0x000001DEA72DFCC0>\ncase_number = 'case_007', case_title = '修改用户状态为2', path = 'users'\nis_token = '读', method = 'put', parametric_key = 'data', file_var = ''\nfile_path = '', parameters = '/{\"case_005\":\"$.data.id\"}/state/2', dependent = ''\ndata = None, res_reg = '', expect = '{\"msg\": \"设置状态成功\", \"status\": 200}'\n\n    @pytest.mark.parametrize('case_number,case_title,path,is_token,method,parametric_key,file_var,'\n                             'file_path,parameters,dependent,data,res_reg,expect',data_list)\n    def test_main(self,case_number,case_title,path,is_token,method,parametric_key,file_var,\n                  file_path,parameters,dependent,data,res_reg,expect):\n        #动态添加标题\n        allure.dynamic.title(case_title)\n    \n        logger.debug(f'***********...执行用例编号： {case_number} ...***********')\n    \n    \n        with allure.step(\"处理相关数据依赖，header\"):\n    \n            data,header,parameters_path_url = treat_data.treating_data(is_token,parameters,dependent,data,save_response_dict)\n    \n            allure.attach(json.dumps(header,ensure_ascii=False,indent=4),\"请求头\",allure.attachment_type.TEXT)\n            allure.attach(json.dumps(data,ensure_ascii=False,indent=4),\"请求数据\",allure.attachment_type.TEXT)\n    \n    \n        with allure.step(\"发送请求，取得响应结果的json串\"):\n            allure.attach(json.dumps(base_url + path + parameters_path_url,ensure_ascii=False,indent=4),\"最终请求地址\",allure.attachment_type.TEXT)\n            res = br.base_requests(method = method,url = base_url+path+parameters_path_url,parametric_key=parametric_key,file_var = file_var,file_path = file_path,\n>                                  data = data,header = header)\n\nTestApi.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\api\\comm\\BaseRequest.py:51: in base_requests\n    res = session.request(method = method,url = url,data = data,files = files,headers = header)\nC:\\Users\\DM\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\requests\\sessions.py:516: in request\n    prep = self.prepare_request(req)\nC:\\Users\\DM\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\requests\\sessions.py:459: in prepare_request\n    hooks=merge_hooks(request.hooks, self.hooks),\nC:\\Users\\DM\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\requests\\models.py:314: in prepare\n    self.prepare_url(url, params)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <PreparedRequest [PUT]>\nurl = 'http://dms-api.op.dianhun.cn:80users/{\"case_005\":\"$.data.id\"}/state/2'\nparams = OrderedDict()\n\n    def prepare_url(self, url, params):\n        \"\"\"Prepares the given HTTP URL.\"\"\"\n        #: Accept objects that have string representations.\n        #: We're unable to blindly call unicode/str functions\n        #: as this will include the bytestring indicator (b'')\n        #: on python 3.x.\n        #: https://github.com/psf/requests/pull/2238\n        if isinstance(url, bytes):\n            url = url.decode('utf8')\n        else:\n            url = unicode(url) if is_py2 else str(url)\n    \n        # Remove leading whitespaces from url\n        url = url.lstrip()\n    \n        # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n        # `data` etc to work around exceptions from `url_parse`, which\n        # handles RFC 3986 only.\n        if ':' in url and not url.lower().startswith('http'):\n            self.url = url\n            return\n    \n        # Support for unicode domain names and paths.\n        try:\n            scheme, auth, host, port, path, query, fragment = parse_url(url)\n        except LocationParseError as e:\n>           raise InvalidURL(*e.args)\nE           requests.exceptions.InvalidURL: Failed to parse: http://dms-api.op.dianhun.cn:80users/{\"case_005\":\"$.data.id\"}/state/2\n\nC:\\Users\\DM\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\requests\\models.py:382: InvalidURL",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "requests.exceptions.InvalidURL: Failed to parse: http://dms-api.op.dianhun.cn:80users/{\"case_005\":\"$.data.id\"}/state/2",
    "statusTrace" : "self = <PreparedRequest [PUT]>\nurl = 'http://dms-api.op.dianhun.cn:80users/{\"case_005\":\"$.data.id\"}/state/2'\nparams = OrderedDict()\n\n    def prepare_url(self, url, params):\n        \"\"\"Prepares the given HTTP URL.\"\"\"\n        #: Accept objects that have string representations.\n        #: We're unable to blindly call unicode/str functions\n        #: as this will include the bytestring indicator (b'')\n        #: on python 3.x.\n        #: https://github.com/psf/requests/pull/2238\n        if isinstance(url, bytes):\n            url = url.decode('utf8')\n        else:\n            url = unicode(url) if is_py2 else str(url)\n    \n        # Remove leading whitespaces from url\n        url = url.lstrip()\n    \n        # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n        # `data` etc to work around exceptions from `url_parse`, which\n        # handles RFC 3986 only.\n        if ':' in url and not url.lower().startswith('http'):\n            self.url = url\n            return\n    \n        # Support for unicode domain names and paths.\n        try:\n>           scheme, auth, host, port, path, query, fragment = parse_url(url)\n\nC:\\Users\\DM\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\requests\\models.py:380: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nurl = 'http://dms-api.op.dianhun.cn:80users/{\"case_005\":\"$.data.id\"}/state/2'\n\n    def parse_url(url):\n        \"\"\"\n        Given a url, return a parsed :class:`.Url` namedtuple. Best-effort is\n        performed to parse incomplete urls. Fields not provided will be None.\n        This parser is RFC 3986 compliant.\n    \n        The parser logic and helper functions are based heavily on\n        work done in the ``rfc3986`` module.\n    \n        :param str url: URL to parse into a :class:`.Url` namedtuple.\n    \n        Partly backwards-compatible with :mod:`urlparse`.\n    \n        Example::\n    \n            >>> parse_url('http://google.com/mail/')\n            Url(scheme='http', host='google.com', port=None, path='/mail/', ...)\n            >>> parse_url('google.com:80')\n            Url(scheme=None, host='google.com', port=80, path=None, ...)\n            >>> parse_url('/foo?bar')\n            Url(scheme=None, host=None, port=None, path='/foo', query='bar', ...)\n        \"\"\"\n        if not url:\n            # Empty\n            return Url()\n    \n        source_url = url\n        if not SCHEME_RE.search(url):\n            url = \"//\" + url\n    \n        try:\n            scheme, authority, path, query, fragment = URI_RE.match(url).groups()\n            normalize_uri = scheme is None or scheme.lower() in NORMALIZABLE_SCHEMES\n    \n            if scheme:\n                scheme = scheme.lower()\n    \n            if authority:\n                auth, host, port = SUBAUTHORITY_RE.match(authority).groups()\n                if auth and normalize_uri:\n                    auth = _encode_invalid_chars(auth, USERINFO_CHARS)\n                if port == \"\":\n                    port = None\n            else:\n                auth, host, port = None, None, None\n    \n            if port is not None:\n                port = int(port)\n                if not (0 <= port <= 65535):\n                    raise LocationParseError(url)\n    \n            host = _normalize_host(host, scheme)\n    \n            if normalize_uri and path:\n                path = _remove_path_dot_segments(path)\n                path = _encode_invalid_chars(path, PATH_CHARS)\n            if normalize_uri and query:\n                query = _encode_invalid_chars(query, QUERY_CHARS)\n            if normalize_uri and fragment:\n                fragment = _encode_invalid_chars(fragment, FRAGMENT_CHARS)\n    \n        except (ValueError, AttributeError):\n>           return six.raise_from(LocationParseError(source_url), None)\n\nC:\\Users\\DM\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\urllib3\\util\\url.py:392: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nvalue = None, from_value = None\n\n>   ???\nE   urllib3.exceptions.LocationParseError: Failed to parse: http://dms-api.op.dianhun.cn:80users/{\"case_005\":\"$.data.id\"}/state/2\n\n<string>:3: LocationParseError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <TestApi.TestApiAuto object at 0x000001DEA72DFCC0>\ncase_number = 'case_007', case_title = '修改用户状态为2', path = 'users'\nis_token = '读', method = 'put', parametric_key = 'data', file_var = ''\nfile_path = '', parameters = '/{\"case_005\":\"$.data.id\"}/state/2', dependent = ''\ndata = None, res_reg = '', expect = '{\"msg\": \"设置状态成功\", \"status\": 200}'\n\n    @pytest.mark.parametrize('case_number,case_title,path,is_token,method,parametric_key,file_var,'\n                             'file_path,parameters,dependent,data,res_reg,expect',data_list)\n    def test_main(self,case_number,case_title,path,is_token,method,parametric_key,file_var,\n                  file_path,parameters,dependent,data,res_reg,expect):\n        #动态添加标题\n        allure.dynamic.title(case_title)\n    \n        logger.debug(f'***********...执行用例编号： {case_number} ...***********')\n    \n    \n        with allure.step(\"处理相关数据依赖，header\"):\n    \n            data,header,parameters_path_url = treat_data.treating_data(is_token,parameters,dependent,data,save_response_dict)\n    \n            allure.attach(json.dumps(header,ensure_ascii=False,indent=4),\"请求头\",allure.attachment_type.TEXT)\n            allure.attach(json.dumps(data,ensure_ascii=False,indent=4),\"请求数据\",allure.attachment_type.TEXT)\n    \n    \n        with allure.step(\"发送请求，取得响应结果的json串\"):\n            allure.attach(json.dumps(base_url + path + parameters_path_url,ensure_ascii=False,indent=4),\"最终请求地址\",allure.attachment_type.TEXT)\n            res = br.base_requests(method = method,url = base_url+path+parameters_path_url,parametric_key=parametric_key,file_var = file_var,file_path = file_path,\n>                                  data = data,header = header)\n\nTestApi.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\api\\comm\\BaseRequest.py:51: in base_requests\n    res = session.request(method = method,url = url,data = data,files = files,headers = header)\nC:\\Users\\DM\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\requests\\sessions.py:516: in request\n    prep = self.prepare_request(req)\nC:\\Users\\DM\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\requests\\sessions.py:459: in prepare_request\n    hooks=merge_hooks(request.hooks, self.hooks),\nC:\\Users\\DM\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\requests\\models.py:314: in prepare\n    self.prepare_url(url, params)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <PreparedRequest [PUT]>\nurl = 'http://dms-api.op.dianhun.cn:80users/{\"case_005\":\"$.data.id\"}/state/2'\nparams = OrderedDict()\n\n    def prepare_url(self, url, params):\n        \"\"\"Prepares the given HTTP URL.\"\"\"\n        #: Accept objects that have string representations.\n        #: We're unable to blindly call unicode/str functions\n        #: as this will include the bytestring indicator (b'')\n        #: on python 3.x.\n        #: https://github.com/psf/requests/pull/2238\n        if isinstance(url, bytes):\n            url = url.decode('utf8')\n        else:\n            url = unicode(url) if is_py2 else str(url)\n    \n        # Remove leading whitespaces from url\n        url = url.lstrip()\n    \n        # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n        # `data` etc to work around exceptions from `url_parse`, which\n        # handles RFC 3986 only.\n        if ':' in url and not url.lower().startswith('http'):\n            self.url = url\n            return\n    \n        # Support for unicode domain names and paths.\n        try:\n            scheme, auth, host, port, path, query, fragment = parse_url(url)\n        except LocationParseError as e:\n>           raise InvalidURL(*e.args)\nE           requests.exceptions.InvalidURL: Failed to parse: http://dms-api.op.dianhun.cn:80users/{\"case_005\":\"$.data.id\"}/state/2\n\nC:\\Users\\DM\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\requests\\models.py:382: InvalidURL",
    "steps" : [ {
      "name" : "处理相关数据依赖，header",
      "time" : {
        "start" : 1606979507747,
        "stop" : 1606979507751,
        "duration" : 4
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "3cafaea721e64479",
        "name" : "请求头",
        "source" : "3cafaea721e64479.txt",
        "type" : "text/plain",
        "size" : 184
      }, {
        "uid" : "79f813df993abb38",
        "name" : "请求数据",
        "source" : "79f813df993abb38.txt",
        "type" : "text/plain",
        "size" : 4
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : true,
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 2
    }, {
      "name" : "发送请求，取得响应结果的json串",
      "time" : {
        "start" : 1606979507751,
        "stop" : 1606979507753,
        "duration" : 2
      },
      "status" : "broken",
      "statusMessage" : "requests.exceptions.InvalidURL: Failed to parse: http://dms-api.op.dianhun.cn:80users/{\"case_005\":\"$.data.id\"}/state/2\n",
      "statusTrace" : "  File \"E:\\pyAutoTest\\autoPy\\test\\TestApi.py\", line 92, in test_main\n    data = data,header = header)\n  File \"E:\\pyAutoTest\\autoPy\\api\\comm\\BaseRequest.py\", line 51, in base_requests\n    res = session.request(method = method,url = url,data = data,files = files,headers = header)\n  File \"C:\\Users\\DM\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\requests\\sessions.py\", line 516, in request\n    prep = self.prepare_request(req)\n  File \"C:\\Users\\DM\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\requests\\sessions.py\", line 459, in prepare_request\n    hooks=merge_hooks(request.hooks, self.hooks),\n  File \"C:\\Users\\DM\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\requests\\models.py\", line 314, in prepare\n    self.prepare_url(url, params)\n  File \"C:\\Users\\DM\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\requests\\models.py\", line 382, in prepare_url\n    raise InvalidURL(*e.args)\n",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "476d1b1cca39db89",
        "name" : "最终请求地址",
        "source" : "476d1b1cca39db89.txt",
        "type" : "text/plain",
        "size" : 75
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : true,
      "shouldDisplayMessage" : true,
      "attachmentsCount" : 1
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 2,
    "hasContent" : true,
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 3
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "test"
  }, {
    "name" : "suite",
    "value" : "TestApi"
  }, {
    "name" : "subSuite",
    "value" : "TestApiAuto"
  }, {
    "name" : "host",
    "value" : "DESKTOP-O07PCGI"
  }, {
    "name" : "thread",
    "value" : "14716-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test.TestApi"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "case_number",
    "value" : "'case_007'"
  }, {
    "name" : "case_title",
    "value" : "'修改用户状态为2'"
  }, {
    "name" : "data",
    "value" : "''"
  }, {
    "name" : "dependent",
    "value" : "''"
  }, {
    "name" : "expect",
    "value" : "'{\"msg\": \"设置状态成功\", \"status\": 200}'"
  }, {
    "name" : "file_path",
    "value" : "''"
  }, {
    "name" : "file_var",
    "value" : "''"
  }, {
    "name" : "is_token",
    "value" : "'读'"
  }, {
    "name" : "method",
    "value" : "'put'"
  }, {
    "name" : "parameters",
    "value" : "'/{\"case_005\":\"$.data.id\"}/state/2'"
  }, {
    "name" : "parametric_key",
    "value" : "'data'"
  }, {
    "name" : "path",
    "value" : "'users'"
  }, {
    "name" : "res_reg",
    "value" : "''"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "e1f937e958daf25a.json",
  "parameterValues" : [ "'case_007'", "'修改用户状态为2'", "''", "''", "'{\"msg\": \"设置状态成功\", \"status\": 200}'", "''", "''", "'读'", "'put'", "'/{\"case_005\":\"$.data.id\"}/state/2'", "'data'", "'users'", "''" ]
}